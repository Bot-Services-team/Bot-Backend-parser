package org.ytcuber.telegrambot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.ytcuber.database.dto.LessonDTO;
import org.ytcuber.database.dto.ReplacementDTO;
import org.ytcuber.database.repository.GroupRepository;
import org.ytcuber.handler.GroupSchedule;

import java.util.*;

@Component
public class TelegramBot extends TelegramLongPollingBot {
    @Autowired
    private GroupRepository groupRepository;
    private GroupSchedule groupSchedule;
    @Autowired
    public void ApplicationInitializer(GroupSchedule groupSchedule, GroupRepository groupRepository) {
        this.groupSchedule = groupSchedule;
        this.groupRepository = groupRepository;
    }

    private static final Logger logger = LoggerFactory.getLogger(TelegramBot.class);
    private Map<String, String> userSelections = new HashMap<>(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    @Override
    public String getBotUsername() {
        logger.info("Bot username: {}", "MpK_Mgn_Bot");
        return "MpK_Mgn_Bot";
    }

    @Override
    public String getBotToken() {
        logger.info("Bot token is set.");
        return "7876544700:AAHm643iVX8MPp4hcSfgqksMK2DOtm3ZMTU";
    }

    private enum UserState {
        NONE, // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        WAITING_FOR_GROUP, // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
        WAITING_FOR_SUBGROUP // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
    }

    private static class UserSession {
        String groupName;
        Integer subgroup;
        UserState state;

        public UserSession() {
            this.state = UserState.NONE;
        }
    }

    private Map<String, UserSession> userSessions = new HashMap<>(); // –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String userMessage = update.getMessage().getText();
            String chatId = update.getMessage().getChatId().toString();
            UserSession userSession = userSessions.computeIfAbsent(chatId, k -> new UserSession()); // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            SendMessage message = new SendMessage();
            message.setChatId(chatId);

            logger.info("Received message: {}", userMessage);

            // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            switch (userMessage.toLowerCase()) {
                case "/start" -> {
                    message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ MpK_Mgn_Bot! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ.");
                    message.setReplyMarkup(createMainKeyboard()); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    userSession.state = UserState.NONE;
                }
                case "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" -> {
                    message.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.");
                    userSession.state = UserState.WAITING_FOR_GROUP; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
                }
                case "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" -> {
                    message.setText("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.");
                    message.setReplyMarkup(createMainKeyboard()); // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                }
                case "–∫–∞–±–∏–Ω–µ—Ç" -> {
                    message.setText("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
                    message.setReplyMarkup(createMainKeyboard());
                }
                case "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" -> {
                    message.setText("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.");
                    message.setReplyMarkup(createMainKeyboard());
                }
                case "—Å–ø—Ä–∞–≤–∫–∞" -> {
                    message.setText("–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª.");
                    message.setReplyMarkup(createMainKeyboard());
                }
                case "–æ—Ç–º–µ–Ω–∞" -> {
                    message.setText("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
                    message.setReplyMarkup(createMainKeyboard());
                    userSession.state = UserState.NONE;
                }
                default -> {
                    handleStatefulCommands(userMessage, message, userSession); // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }
            }

            try {
                execute(message); // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info("Message sent: {}", message.getText());
            } catch (TelegramApiException e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
            }
        }
    }

    private void handleStatefulCommands(String userMessage, SendMessage message, UserSession userSession) {
        switch (userSession.state) {
            case WAITING_FOR_GROUP -> {
                handleGroupInput(userMessage, message, userSession); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
            }
            case WAITING_FOR_SUBGROUP -> {
                handleSubgroupInput(userMessage, message, userSession); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã
            }
            default -> {
                message.setText("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.");
                message.setReplyMarkup(createMainKeyboard());
            }
        }
    }


    private void handleGroupInput(String userMessage, SendMessage message, UserSession userSession) {
        try {
            Integer groupId = groupRepository.findByName(userMessage);
            if (groupId != null) {
                userSession.groupName = userMessage;
                userSession.state = UserState.WAITING_FOR_SUBGROUP;
                message.setText("–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã (1 –∏–ª–∏ 2).");
                message.setReplyMarkup(createSubgroupKeyboard());
            } else {
                message.setText("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã", e);
            message.setText("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã.");
        }
    }

    private void handleSubgroupInput(String userMessage, SendMessage message, UserSession userSession) {
        if ("1".equals(userMessage) || "2".equals(userMessage)) {
            userSession.subgroup = Integer.parseInt(userMessage);
            userSession.state = UserState.NONE;

            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                List<Object> schedule = groupSchedule.giveSchedule(userSession.groupName, userSession.subgroup, 1);
                String scheduleText = buildScheduleText(schedule, userSession.groupName, userSession.subgroup);
                message.setText(scheduleText);
                message.setReplyMarkup(createMainKeyboard());
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", e);
                message.setText("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
            }
        } else {
            message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2 –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã.");
        }
    }

    private String buildScheduleText(List<Object> schedule, String groupName, int subgroup) {
        Map<String, List<Object>> scheduleByDay = new LinkedHashMap<>();
        for (Object item : schedule) {
            String dayOfWeek;
            if (item instanceof LessonDTO lesson) {
                dayOfWeek = String.valueOf(lesson.getDayOfWeek());
            } else if (item instanceof ReplacementDTO replacement) {
                dayOfWeek = String.valueOf(replacement.getDatOfWeek());
            } else {
                continue;
            }
            scheduleByDay.computeIfAbsent(dayOfWeek, k -> new ArrayList<>()).add(item);
        }

        StringBuilder scheduleText = new StringBuilder();
        scheduleText.append(String.format("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã %s –ø–æ–¥–≥—Ä—É–ø–ø—ã %d:\n\n", groupName, subgroup));

        for (Map.Entry<String, List<Object>> entry : scheduleByDay.entrySet()) {
            String dayOfWeek = entry.getKey();
            List<Object> daySchedule = entry.getValue();

            scheduleText.append(String.format("üìÖ %s:\n", dayOfWeek));

            for (Object item : daySchedule) {
                if (item instanceof LessonDTO lesson) {
                    scheduleText.append(String.format(
                            "%d. %s üéì%s üö™%s\n",
                            lesson.getOrdinal() != null ? lesson.getOrdinal() : 0,
                            lesson.getSubject() != null ? lesson.getSubject() : "–ü–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå",
                            lesson.getTeacher() != null ? lesson.getTeacher() : "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                            lesson.getLocation() != null ? lesson.getLocation() : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    ));
                } else if (item instanceof ReplacementDTO replacement) {
                    scheduleText.append(String.format(
                            "‚úè %d. %s üéì%s üö™%s\n",
                            replacement.getOrdinal() != null ? replacement.getOrdinal() : 0,
                            replacement.getSubject() != null ? replacement.getSubject() : "–ü–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå",
                            replacement.getTeacher() != null ? replacement.getTeacher() : "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                            replacement.getLocation() != null ? replacement.getLocation() : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    ));
                }
            }

            scheduleText.append("\n");
        }

        return scheduleText.toString();
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —ç–∫—Ä–∞–Ω

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"));
        row1.add(new KeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"));

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–ö–∞–±–∏–Ω–µ—Ç"));
        row2.add(new KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"));

        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–ø—Ä–∞–≤–∫–∞"
        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("–°–ø—Ä–∞–≤–∫–∞"));

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);

        keyboardMarkup.setKeyboard(keyboardRows);

        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createDateKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —ç–∫—Ä–∞–Ω

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–í—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ"));

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–°–µ–≥–æ–¥–Ω—è"));
        row2.add(new KeyboardButton("–ó–∞–≤—Ç—Ä–∞"));

        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("–û—Ç–º–µ–Ω–∞"));

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);

        keyboardMarkup.setKeyboard(keyboardRows);

        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup createSubgroupKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —ç–∫—Ä–∞–Ω

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("1"));
        row1.add(new KeyboardButton("2"));

        keyboardRows.add(row1);

        keyboardMarkup.setKeyboard(keyboardRows);

        return keyboardMarkup;
    }

}
